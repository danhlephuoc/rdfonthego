#summary RDF On The Go setting up and evaluation.

= Introduction =

This tutorial explains how to set up the RDF On The Go for an Android application and how we did the experiences on that.

=1.Setting up an Android application with RDF OTG=
This new version of RDF OTG provides native RDF storage and Sparql querying engine for Android platform. Thus, all you will need to add into your Android application are just two jar files below:

- <a href='https://rdfonthego.googlecode.com/files/otg_rdf_core.jar'>otg_rdf_core.jar</a> - The native RDF store for Android platform.

- <a href='https://rdfonthego.googlecode.com/files/otg_arq.jar'>otg_arq.jar </a> - The spaql query engine which is ported from Jena ARQ with some modifications in order to pair with RDF OTG.

* Note: Requires Android 2.3.3 or later version and WRITE_EXTERNAL_STORAGE permisson has to be added in the Android project.

==2. Setting up for evaluations==

===2.1 Social network generation===
 For data simulations, we used <a href='http://sourceforge.net/projects/sibenchmark/'> Social Intelligence Benchmark(SIB) tool</a> which takes the schema style from popular social networks such as Facebook as the baseline for designing an RDF-friendly, scientific benchmark. Specifically, it simulates an RDF backend of a social network site, in which users and their interactions form an social graph of social activities such as writing posts, posting comments, creating/managing groups, etc.
 
 The number of users could be change in the parameter file - params.ini. And we also modified name space, the number of friends, the number of photos, posts, comments in order to simulate different network. Example www.facebook.com for facebook, www.linkedin.com for Linkedin, etc. The triples will be saved into text file with n-triples format. The simulated data for our evaluation could be found <a href= 'https://rdfonthego.googlecode.com/files/social%20dataset.rar'>here</a>


===2.2 Update throughput evaluation===
After generating the simulated graph, we put the n-triples data files into SD card under folder 'Experience'. On Galaxy and Nexus, we can put them into their virtual removable storage. The Android OS will create an virtual path to copied directory and treat it as it is in the external storage. Thus we can get access to these files by the same way on 3 devices.

{{{
 String loading_path = Environment.getExternalStorageDirectory() + "/Experience/";
}}}

*Note: 

You can install <a href= 'https://play.google.com/store/apps/details?id=org.openintents.filemanager&feature=search_result#?t=W251bGwsMSwxLDEsIm9yZy5vcGVuaW50ZW50cy5maWxlbWFuYWdlciJd'>IO File Manager</a> the check if the files are already copied into the storage.

In RDF OTG, we also plugged  Jena Riot Loader in case of parsing RDF from n-triples format. In first experiment, for evaluating throughput of inserting data. We created a graph with about 1500 users which contains about one million triples and parse into the store, then we measure the insertion speed. The codes of experiment are in the scripts below: 

{{{ 
 //TDB JENA
 public static void start(){
 String loading_path = Environment.getExternalStorageDirectory() + "/Experience/";
 String store_path   = Environment.getExternalStorageDirectory() + "/JenaTDB/";
 Graph graph = TDBFactory.createGraph(store_path);
 FileUtil fileUtil = new FileUtil("JenaTDB_1_Ex");
 BufferedReader in;
 ParserTurtle parser = new ParserTurtle();
 try {
	    fileUtil.start();
	    for (int i = 1; i < 100; i++) {
	        fileUtil.write(graph.size());   
	        int k = 1700000 + i;
		in = new BufferedReader(new FileReader(loading_path + "mr0_fb" + Integer.toString(k) + ".nt"));
		parser.parse(graph, " ", in);
		fileUtil.write(graph.size());
		TDB.sync(graph);
	    }
	    fileUtil.close();
	} catch (IOException e) {
	    e.printStackTrace();
	}
    }
}}}

{{{ 
 //RDF OTG
 String load_path = Environment.getExternalStorageDirectory() + "/Experience/";
 String store_Path = Environment.getExternalStorageDirectory() + "/RDF_OTG/";
 public static void start() {
        Graph graph = new OTGGraph(store_path);
	FileUtil fileUtil = new FileUtil("RDF_OTG_1_Ex");
	try {
	    fileUtil.start();
	    fileUtil.write(graph.size());
	    for (int i = 1; i < 100; i++) {
	        fileUtil.write(graph.size());
		int k = 1700000 + i;
		RiotLoader.read(loading_path + "mr0_fb" + Integer.toString(k) + ".nt", graph);
		fileUtil.write(graph.size());
		graph.sync();
	    }
	    fileUtil.close();
	} catch (IOException e) {
	    e.printStackTrace();
	}
    }
}}}

The experiments stopped when the loading finishes or the application crashes due to out of heap memory.

===2.3 Comparing query evaluation===
For evaluating the query processor. We implemented Integration Graph for both Jena TDB and RDF OTG. The applications could be found in the download of this project.

  
===2.4 Scalability evaluation===