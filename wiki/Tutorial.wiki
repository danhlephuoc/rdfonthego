#summary This tutorial will explain how to use RDFonthego.

== Working with RDFOnthego ==
  
     RDFOnthego based on <a href='http://jena.sourceforge.net/'>Jena Semantic Web</a> framework, so that it works like Jena. If you are not familiar with Jena please take a look at <a href = 'http://jena.sourceforge.net/tutorial/RDF_API/index.html'> Jena Tutorial.</a>
 
== 1. BDBGraph ==
 BDBGraph is extended class of <a href='http://jena.sourceforge.net/javadoc/com/hp/hpl/jena/graph/Graph.html'>Jena Graph interface</a>. It is used as a store handler with methods working with triples such as adding, deleting, saving. 
=== 1.1 Create a Graph ===

 There are 2 ways to create a BDBGraph, using 
 
  {{{ BDBGraph graph; }}}

  {{{ String storeName = "Store"; }}} 

  {{{ graph = Factory.createBDBGraph(storeName); }}}
 
 Or:

   {{{ BDBGraph graph;}}}  

   {{{ String storeName = "store"}}} 

   {{{ graph = new BDBGraph(storeName); }}}.

 *NOTE: Remember to close store when you finish your work by calling {{{graph.close()}}}. If store is not closed, it will take a long time when you open it again. 

=== 1.2 Adding Triples ===
 There are 3 ways to add triple to graph(store): 
 * Add a single triple to graph:

  {{{  Node s,p,o; }}}

  {{{  Triple t;  }}}

  {{{  s = Node.createURI("http://example.org"); }}}

  {{{  p = Node.createURI("http://xmlns.com/foaf/0.1/name"); }}}

  {{{  o = Node.createLiteral("Anh Le Tuan"); }}}

  {{{  Triple t = new Triple (s,p,o);  }}}

  {{{  graph.add(t); }}}
 
 * Load Triple from file:
   
 {{{String filePath	= android.os.Environment.getExternalStorageDirectory()+ "/Android/data/foaf.n3"; }}}
    
 {{{String baseUri = "http://www.deri.ie/fileadmin/scripts/foaf.php?id=532" }}} 

  {{{ graph.load(String filePath, String baseUri) }}}
  
 * Load Triple from an URL
 BDBGraph only supports to RDF n-triple and n3 so others RDF formats must be converted to n-triples before being put to graph. In case of working with online URL, we suggest using any23.org api. 
  
   {{{String baseUri = "http://www.deri.ie/fileadmin/scripts/foaf.php?id=532"; }}}

   {{{String url = "http://any23.org/nt/" + baseUri;}}}

   {{{ graph.load(String url, String baseUri) }}}

 
== 2 Integrate with Jena==

=== 2.1 Model ===

 The only thing is required to create a model for BDBGraph is the store name.

 The model can be create by:

 {{{Model model;}}}

 {{{String storeName = "store"; }}}

 {{{model = ModelFactory.creatModelStore("store");}}}

 Or:
  
 {{{BDBGraph graph = new BDBGraph(storeName);}}}

 {{{model = new ModelCom(graph);}}}

 And now we are able to see the statements we have in our store.

 {{{// list the statements in the Model}}}

 {{{StmtIterator iter = model.listStatements();}}}

 {{{// print out the predicate, subject and object of each statement}}}

 {{{while (iter.hasNext()) { }}}

 {{{Statement stmt      = iter.nextStatement();  // get next statement}}}

 {{{Log.d("System.out", stmt.asTriple.toString());}}}
 
 {{{} }}}


=== 2.2 Query with ARQ ===
 
 In Rdfonthego project, <a href='http://openjena.org/ARQ/app_api.html'>JENA ARQ api.</a> has been embedded with "SELECT queries" only.

 The example below shows how to use ARQ:

 {{{//Open a store}}} 

 {{{BDBGraph graph = new BDBGraph("store");}}}

 {{{//Create the model}}}

 {{{model = new ModelCom(graph);}}}

 {{{// Create query String}}}
 
 {{{String queryString = StrUtils.strjoin }}}

 {{{ ("\n", }}}

 {{{ "PREFIX foaf: <http://xmlns.com/foaf/0.1/>", }}}

 {{{ "SELECT DISTINCT  ?name {" ,}}}
  
 {{{ ?uri foaf:name  ?name.", }}}

 {{{ "}") ;}}}

 {{{//Create a query }}}

 {{{ Query query = QueryFactory.create(queryString) ; }}}

 {{{ QuerySolution sol; }}}

 {{{ QueryExecution qExec = QueryExecutionFactory.create(query, model) ; }}}

 {{{ for(ResultSet itr    = qExec.execSelect();itr.hasNext();){ }}}

 {{{ sol=itr.next(); }}}

 {{{ Log.d("System.out", sol.get("name").toString()); }}}

 {{{}}}}

 {{{ qExec.close() ; }}}

 {{{}}}}

=== 2.3 Integrate with Spatial===
  
 The examples how to use the spatial index to work with Geo RDF.

 {{{ BDBGraph graph	=	new BDBGraph("Map"); }}}

 {{{ model	=	new ModelCom(graph); }}}
    			
 {{{ PropertySet ps2 = new PropertySet(); }}}

 {{{ps2.setProperty("Dimension", 2);}}}

 {{{BDBStorageManager	bdbSM = new BDBStorageManager();}}}
 
 {{{RTree rtree;}}}
    			
 {{{rtree = new RTree(ps2, bdbSM);}}}

 {{{Indexer i=	new Indexer(rtree);}}}
    			
 {{{i.createIndex(model);}}}

 {{{bdbSM.flush();}}}
    		
 {{{String queryString = StrUtils.strjoin}}}

 {{{("\n", }}}

 {{{"PREFIX spatial: <java:org.geospatialweb.arqext.>",}}}

 {{{"PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>",}}}

 {{{   			 "SELECT DISTINCT  ?lat ?long{" ,    }}}

 {{{   			 "?uri geo:lat ?lat.",}}}

 {{{   			 "?uri geo:long ?long.",}}}

 {{{   			 "?s spatial:nearby(53.285029 -9.081154 10)",}}}

 {{{   			 "}") ;}}}
    
 {{{ Query query = QueryFactory.create(queryString) ; }}}
 
 {{{QuerySolution sol;}}}
    			
 {{{QueryExecution qExec = QueryExecutionFactory.create(query, model) ;}}}
    
 {{{Geo.setContext(qExec, i);}}}

 {{{for(ResultSet itr    = qExec.execSelect();itr.hasNext();){}}}

 {{{sol=itr.next();}}}
   
 {{{System.out.println(sol.get("lat").toString() + "===" + sol.get("long").toString() ); }}}

 {{{}}}}

 {{{qExec.close() ;}}}
    		
=== 2.4 Integrate with Lucene ===

 Lucene ARQ works well with BDBGraph.

 This example shows how to use Lucene index and query with LARQ.

 You can create String lucene index with store

 {{{String appFolder = androis.os.Environment.getExternalStorageDirector() + "/Androi/data/";}}}

 {{{IndexBuilderString larqBuilder = new IndexBuilderString(appFolder);}}}

 {{{BDBGraph graph = new BDBGraph(store);}}}

 {{{Model model = new ModelCom(graph);}}}

 {{{model.register(larqBuilder);}}}

 {{{larq.indexStatements(model.listStatements());}}}

 {{{larq.closeWrite();}}}

 {{{IndexLARQ index = larqBuilder.getIndex();}}}

 {{{String queryString = StrUtils.strjoin(}}}

 {{{"\n",}}}

 {{{"PREFIX pf: <http://jena.hpl.hp.com/ARQ/property#>",}}}

 {{{"SELECT * {" ,}}}

 {{{"    ?lit pf:textMatch '+Anh'",}}}

 {{{"}");}}}
				 
 {{{Query query	=	QueryFactory.create(queryString);}}}
    		
 {{{QueryExecution qExec	=	QueryExecutionFactory.create(query, model);}}}

 {{{LARQ.setDefaultIndex(qExec.getContext(),index);}}}
    		
 {{{QuerySolution sol;}}}

 {{{for(ResultSet itr    = qExec.execSelect();itr.hasNext();){}}}

 {{{sol=itr.next();}}}

 {{{System.out.println(sol.get("lit").toString());}}}
				
 {{{}}}}
    	
 {{{qExec.close();}}}



For more details please take a look at our example. How to build a simple android application with rdfonthego.
 
 